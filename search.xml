<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实践redux的createStore</title>
      <link href="/2020/03/20/%E5%AE%9E%E8%B7%B5redux%E7%9A%84createStore/"/>
      <url>/2020/03/20/%E5%AE%9E%E8%B7%B5redux%E7%9A%84createStore/</url>
      
        <content type="html"><![CDATA[<p>redux是一个不限于react、rn，也可用于其他开发框架的，通用状态管理解决方案。<br>其核心代码简练精妙，充分贯彻函数式编程及闭包思想<br>下面实践一个简单版本的createStore，一方面也是自我学习。 </p><pre><code>    function createStore(reducer, prestate,enhancer){        if(typeof enhancer === &#39;function&#39;){            return enhancer(createStore)(reducer,prestate)        }        let currentState = prestate        let listeners = []        let nextListeners = listeners        let currentReducer = reducer        let dispatch = function(action){            currentState  = currentReducer(currentState, action)            for(let i =0 ;i&lt;listeners.length; i++){                let listener = listeners[i]                listener()            }            return action        }        let ensureListener = function(){            if(nextListeners  === currentReducer){                nextListeners =  currentReducer.slice()            }        }        let subscribe = function(func){            let isSubscribe = true            ensureListener()            nextListeners.push(func)            let unsubscribe = function(){                if(!isSubscribe){                    return                 }                isSubscribe = false                ensureListener()                let index = nextListeners.indexOf(func)                nextListeners.splice(index,1)            }            return unsubscribe        }        let getState = function(){            return currentState        }        dispatch(&#39;a&#39;)        return {            dispatch,            getState,            subscribe,        }    }</code></pre><p>运行示例代码</p><pre><code>    let reducer = (state=[], action)=&gt;{        if(action.type === &#39;add&#39;){            let newState = state.slice()            newState.push(action.val)            return newState        }        return state    }    let store = createStore(reducer, [], enhancer)    console.log(store.getState())   // []    store.dispatch({val:11, type:&quot;add&quot;})    console.log(store.getState())   // [11]    store.subscribe(()=&gt;{        console.log(store.getState())   // [11]  [112,22]    })    ler unscribe = store.subscribe(()=&gt;{        console.log(store.getState())   // [11]        unscribe()    })    store.dispatch({val:222, type:&quot;add&quot;})</code></pre><p>现在添加enhancer处理, enhancer类似一个中间件处理函数，只需要返回一个store即可，可以做一些定制化处理</p><pre><code>    let enhancer = (createStore)=&gt;(reducer,prestate)=&gt;{        let store = createStore(reducer,prestate)        let oldAction = store.action        store.action = function(action){            console.log(&#39;laile&#39;)            return oladAction(action)        }        return store    }</code></pre><p>以上就是所有代码实践<br>有机会对redux的combineReducers函数的做下实现</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-004</title>
      <link href="/2020/02/18/nginx-004-%E8%BF%9B%E7%A8%8B/"/>
      <url>/2020/02/18/nginx-004-%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx进程结构"><a href="#Nginx进程结构" class="headerlink" title="Nginx进程结构"></a>Nginx进程结构</h3><pre><code>masterworkercache loadercache manager </code></pre><h3 id="Nginx进程管理"><a href="#Nginx进程管理" class="headerlink" title="Nginx进程管理"></a>Nginx进程管理</h3><pre><code>接收信号    TERM,INT         =&gt; stop        立即停止     QUIT             =&gt; quit        优雅的停止    HUP              =&gt; reload        重载配置文件    URT1             =&gt; reopen        日志切割        旧日志文件改名 旧文件名句柄依然存在 新产生的日志依然会写在旧文件名日志里    USR2    WINCH        kill命令执行</code></pre><h3 id="reload流程"><a href="#reload流程" class="headerlink" title="reload流程"></a>reload流程</h3><pre><code>1、向master进程发送HUP信号（reload)2、master进程校验配置语法是否正确3、master进程打开新的监听端口 （master进程统一管理worker进程，worker进程会继承master进程的端口等信息）4、master进程用新配置启动新的worker子进程5、master进程向老的worker进程发送QUIT信号(优雅退出 =&gt; 老的woker进程会在处理完当前链接后自动关闭)6、老的worker进程关闭监听的句柄，处理完当前链接后结束进程</code></pre><h3 id="热升级流程"><a href="#热升级流程" class="headerlink" title="热升级流程"></a>热升级流程</h3><pre><code>1、将新的nginx文件替换老的nginx文件（注意将老的nginx文件替换)2、向master进程发送USR2信号    USR2做的事情           3、master进程修改pid文件名，加后缀.oldbin    4、mater进程用的新的nginx文件启动新的master进程5、向老master进程发送QUIT信号，关闭老master进程6、回滚向老master进程发送HUP,向新master进程发送QUIT</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-003</title>
      <link href="/2020/01/28/nginx-003-TLS/"/>
      <url>/2020/01/28/nginx-003-TLS/</url>
      
        <content type="html"><![CDATA[<h3 id="TLS通讯过程"><a href="#TLS通讯过程" class="headerlink" title="TLS通讯过程"></a>TLS通讯过程</h3><pre><code>验证身份达成安全套件共识传递密钥加密通讯1、client hello：                2、server:     浏览器支持的加密算法列表           服务器支持的加密算法列表，将倾向的加密套件发送给客户端                                3、server  certificate:    client  certificate verify     将证书发送给客户端                                4、server hello done:                                    如果协商的是椭圆曲线算法，在3、4之间将公共参数发送给客户端                                    至此双方对安全套件达成共识      5、client 根据椭圆曲线算法生成自己的私钥，将公钥给服务端6、client 利用服务器端公钥和自己的私钥生成对称加密密钥key6、服务器端根据客户端的公钥和自己的私钥依据相同算法生成对称加密密钥key7、client finished7、server finished</code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-002</title>
      <link href="/2020/01/11/nginx-002-%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/01/11/nginx-002-%E9%9D%99%E6%80%81%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="ngixn搭建静态服务器"><a href="#ngixn搭建静态服务器" class="headerlink" title="ngixn搭建静态服务器"></a>ngixn搭建静态服务器</h3><h4 id="搭建静态服务器-完整配置文件"><a href="#搭建静态服务器-完整配置文件" class="headerlink" title="搭建静态服务器(完整配置文件)"></a>搭建静态服务器(完整配置文件)</h4><pre><code>    http{               log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;                  &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;                  &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;  // 日志格式            listen 8080;             server_name  localhost;            access_log  logs/static.access.log  main;            charset utf-8;            location / {                alias  $root/;                autoindex on;  #当地址闭合时 开启静态资源目录树状显示,供用户选择                index index.html;            }            error_page  404  /404.html; #自定义404            location = /404.html {                limit_rate 1b;  #默认0                root   $root/;            }        }        #(压缩配置)        gzip on;         gzip_min_length 1;        gzip_comp_level 2;        gzip_types text/plain text/css text/javascript   application/x-javascript; #(压缩类型)    }</code></pre><h4 id="root-与-alias的不同"><a href="#root-与-alias的不同" class="headerlink" title="root 与 alias的不同"></a>root 与 alias的不同</h4><pre><code>root 会将匹配到的路径与root路径拼装成完整路径如  location /abc/ {  root  $root/;}  /abc/a.html =&gt; 返回 $root/abc/a.htmlalias 会替换匹配到的路径，alias路径必须闭合, 如  location /abc/ {  root  $root/;}  /abc/a.html =&gt; 返回 $root/a.html</code></pre><h5 id="限速"><a href="#限速" class="headerlink" title="限速"></a>限速</h5><pre><code>通过内置变量 limit_rate实现,如  limit_rate 1k,此时以每秒1k的速度 向客户端传输数据</code></pre><h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><pre><code>指令 log_format main 日志格式  //指定  日志格式变量名   日志格式使用 access_log   /logs/access_log  main  </code></pre><h3 id="ngixn配置反向代理-完整配置文件"><a href="#ngixn配置反向代理-完整配置文件" class="headerlink" title="ngixn配置反向代理(完整配置文件)"></a>ngixn配置反向代理(完整配置文件)</h3><p>需要两个服务配合，建议开个node服务|再下个openresty开启服务</p><pre><code>    http{               upstream local {  #上游服务，一般是内网ip地址,可配置多个，可使用ip_hash等内置算法实现负载均衡                server 127.0.0.1:3333              }            location / {                proxy_set_header  HOST  $HOST   #域名发给上游服务器处理                proxy_set_header   X-Real-IP $remote_addr;  #用户ip                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #代理转发ip,追加，不可信                proxy_pass http://local            }            error_page  404  /404.html; #自定义404            location = /404.html {                limit_rate 1b;  #默认0                root   $root/;            }        }    }</code></pre><h3 id="ngixn配置缓存"><a href="#ngixn配置缓存" class="headerlink" title="ngixn配置缓存"></a>ngixn配置缓存</h3><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-001</title>
      <link href="/2020/01/01/nginx-001-%E7%BC%96%E8%AF%91/"/>
      <url>/2020/01/01/nginx-001-%E7%BC%96%E8%AF%91/</url>
      
        <content type="html"><![CDATA[<h3 id="ngixn编译安装"><a href="#ngixn编译安装" class="headerlink" title="ngixn编译安装"></a>ngixn编译安装</h3><h4 id="源码目录结构"><a href="#源码目录结构" class="headerlink" title="源码目录结构"></a>源码目录结构</h4><hr><pre><code>auto    cc: 编译    lib: 辅助编译    os： 系统特性    types： 辅助编译CHANGES: 每个版本的特性和bug修复CHANGES.ru: 俄语版说明conf: nginx配置示例文件configure: 用于生成中间文件、编译前的必备动作配置脚本    --with-module: 编译主动需要的模块， 默认不参加编译    --without-mpdule: 编译不需要的模块， 默认参加编译    --with-cc: 编辑加入特性    and so on...objs: 执行configure命令 生成的中间件文件  nginx版本升级 需要将objs迁移到目标目录    ngx_modules.c: 编译进nginx的模块列表    src: c语言编译生成文件    and so on contrib: 脚本文件，语法提示html: 文件目录 50x./index.htmlman: nginx 帮助文件,指令介绍src: nginx源代码</code></pre><hr><h4 id="编译成功"><a href="#编译成功" class="headerlink" title="编译成功"></a>编译成功</h4><hr><pre><code>./configure 参数  make install 编译成功目录结构:    conf: 如上    sbin: nginx启动程序文件    html: 如上    logs: 日志基础语法: 指令块(花括号) 指令(分号结尾，多个参数空格分开)  $(变量)  #(注释)</code></pre><hr><h4 id="重载、热部署"><a href="#重载、热部署" class="headerlink" title="重载、热部署"></a>重载、热部署</h4><hr><pre><code>重载-s  reload: 重启配置项，不停止服务的情况下，针对的是配置文件修改    stop: 停止nginx热部署1、把当前nginx 化为老文件  cp  sbin/nginx sbin/nginx.old2、复制objs生成的nginx二进制文件到 sbin/下 覆盖老nginx   3、查看nginx master主进程号  ps -ef | grep nginx4、kill -USR2 master进程号  启动升级新的nginx进程 老进程依然存在但不再监听80,443端口5、kill -WINCH master进程号  老master进程存在 woker进程退出, 请求现在由新master进程处理6、版本回退，cp sbin/nginx.old  sbin/nginx  kill -WINCH 新的master进程号   kill -HUP 从老的mater进程号 拉起工作进程</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/01/hello-world/"/>
      <url>/2020/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h3 id="Say-Helloworld"><a href="#Say-Helloworld" class="headerlink" title="Say Helloworld"></a>Say Helloworld</h3><pre class=" language-bash"><code class="language-bash">$ javascript: console.log<span class="token punctuation">(</span><span class="token string">'hello World'</span><span class="token punctuation">)</span>$ python: print<span class="token punctuation">(</span><span class="token string">'hello World'</span><span class="token punctuation">)</span>$ php: echo<span class="token punctuation">(</span><span class="token string">'hello World'</span><span class="token punctuation">)</span>$ java: System.out.println<span class="token punctuation">(</span><span class="token string">'hello World'</span><span class="token punctuation">)</span>$ c<span class="token comment" spellcheck="true">#: System.Console.WriteLine('hello World')</span></code></pre><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
